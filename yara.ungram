SourceFile = 
    ImportStmt* | IncludeStmt* |Rule*

IncludeStmt = 
    'include' 'string_lit'

ImportStmt = 
    'import' 'string_lit'

Rule = 
    Modifier* 'rule' 'identifier' ':'? Tag*
        body:BlockExpr

Modifier = 
    'private' | 'global'

Tag = 
    'identifier'

BlockExpr = 
    '{'
        Meta? Strings? Condition
    '}'

Meta = 
    'meta' ':'
        MetaStmt*

MetaStmt =
    'identifier' '=' 
        |  'bool_lit'
        |  'string_lit'
        |  'int_lit'
        |  'float_lit'

Strings =
    'strings' ':'
        VariableStmt*

VariableStmt =
    'variable' '=' Pattern

Pattern = 
        'string_lit' PatternMod*
    |   HexPattern PatternMod*
    |   RegexPattern PatternMod*

RegexPattern = 
    'regex_lit' RegexMod*

RegexMod =
    'case_insensitive' | 'dot_matches_all'

HexPattern =
    '{' HexToken '}'

HexToken = 
    (HexByte | HexAlternative) HexTokenTail*

HexTokenTail =
    HexJump* (HexByte | HexAlternative)

HexByte = 
    'hex_lit'

HexAlternative = 
    '(' HexToken HexPipe* ')'

HexPipe = 
    '|' HexToken

HexJump =
    '[' 
        (
            lhs:Literal? '-' rhs:Literal?
        |   lhs:Literal 
        )
    ']'

PatternMod = 
    'ascii'
|   'wide'
|   'nocase'
|   'private'
|   'fullword'
|   'base64wide'
|   'base64'
|   'xor'
|   BaseAlphabet?
|   XorRange?

BaseAlphabet = 
    '(' 'string_lit' ')'

XorRange = 
    '(' 
        (
            lhs:Literal '-' rhs:Literal
        |   lhs:Literal
        )
    ')'

Condition =
    'condition' ':'
        ExpressionStmt

ExpressionStmt = Expr

Expr = 
    Expression
|   PrefixExpr
|   Literal

Expression = 
    lhs:Expr 
        op:('and' | 'or')
    rhs:Expr

PrefixExpr = 
        'not'
    Expr

Literal =
    value:('bool_lit' | 'variable' | 'int_lit')
