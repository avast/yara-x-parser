SourceFile = 
    ImportStmt* | IncludeStmt* |Rule*

IncludeStmt = 
    'include' 'string_lit'

ImportStmt = 
    'import' 'string_lit'

Rule = 
    Modifier* 'rule' 'identifier' ':'? Tag*
        body:BlockExpr

Modifier = 
    'private' | 'global'

Tag = 
    'identifier'

BlockExpr = 
    '{'
        Meta? Strings? Condition
    '}'

Meta = 
    'meta' ':'
        MetaStmt*

MetaStmt =
    'identifier' '=' 
        |  'bool_lit'
        |  'string_lit'
        |  'int_lit'
        |  'float_lit'

Strings =
    'strings' ':'
        VariableStmt*

VariableStmt =
    'variable' '=' Pattern

Pattern = 
        'string_lit' PatternMod*
    |   HexPattern PatternMod*
    |   RegexPattern PatternMod*

RegexPattern = 
    'regex_lit' RegexMod*

RegexMod =
    'case_insensitive' | 'dot_matches_all'

HexPattern =
    '{' HexToken '}'

HexToken = 
    (HexByte | HexAlternative) HexTokenTail*

HexTokenTail =
    HexJump* (HexByte | HexAlternative)

HexByte = 
    'hex_lit'

HexAlternative = 
    '(' HexToken HexPipe* ')'

HexPipe = 
    '|' HexToken

HexJump =
    '[' 
        (
            lhs:'int_lit'? '-' rhs:'int_lit'?
        |   lhs:'int_lit' 
        )
    ']'

PatternMod = 
    'ascii'
|   'wide'
|   'nocase'
|   'private'
|   'fullword'
|   'base64wide'
|   'base64'
|   'xor'
|   BaseAlphabet?
|   XorRange?

BaseAlphabet = 
    '(' 'string_lit' ')'

XorRange = 
    '(' 
        (
            lhs:'int_lit' '-' rhs:'int_lit'
        |   lhs:'int_lit'
        )
    ')'

Condition =
    'condition' ':'
        BooleanExpr

BooleanExpr = 
    BooleanTerm
|   BooleanTerm
        (
            'and'| 'or'
        )
    BooleanExpr

BooleanTerm = 
    'variable' VariableAnchor?
|   Expr
|   Expr 
        (
            '==' | '!=' | '<' | '<=' | '>' | '>=' |
            'contains' | 'icontains' | 'startswith' | 'istartswith' | 'endswith' | 'iendswith' | 'iequals' | 'matches'
        )
    Expr
|   'bool_lit'
|   'not' BooleanTerm
|   'defined' BooleanTerm
|   '(' BooleanExpr ')'
|   OfExpr
|   ForExpr

Expr = 
    Term
|   Term 
        (
            '+' | '-' | '*' | 'backslash' | '%' |
            '&' | '|' | '^' | '<<' | '>>' | '~' | '.' 
        )
    Expr

Term = 
    PrimaryExpr
|   IndexingExpr
|   FunctionCallExpr

PrimaryExpr = 
    'float_lit'
|   'int_lit'
|   'string_lit'
|   VariableCount
|   VariableOffset
|   VariableLength
|   'filesize'
|   'entrypoint'
|   RegexPattern
|   '-' Term
|   '~' Term
|   '(' Expr ')'
|   (IdentifierNode ('.' IdentifierNode)*)

VariableCount = 
    'variable_count' InRange?

VariableOffset = 
    'variable_offset' ExprIndex?

VariableLength = 
    'variable_offset' ExprIndex?

InRange = 
    'in' Range

ExprIndex = 
    '[' Expr ']'

IndexingExpr = 
    PrimaryExpr '[' Expr ']'

FunctionCallExpr =
    PrimaryExpr ExprTuple

VariableAnchor = 
    'at' Expr
|   'in' Range

Range = 
    '('
        Expr '..' Expr
    ')'

OfExpr = 
    Quantifier 'of' ('them' | PatternIdentTuple) VariableAnchor?
|   Quantifier 'of' BooleanExprTuple

ForExpr =
    (
        'for' Quantifier 'of' ('them' | PatternIdentTuple)
    |   'for' Quantifier 'of' (IdentifierNode (',' IdentifierNode)*) 'in' Iterable
    )
    ':' '(' BooleanExpr ')'

Quantifier = 
    'all'
|   'any'
|   'none'
|   PrimaryExpr '%'?

Iterable = 
    Range | Expr | ExprTuple

PatternIdentTuple = 
    '(' (VariableWildcard (',' VariableWildcard)*) ')'

VariableWildcard =
    'variable' '*'?

BooleanExprTuple =
    '(' (BooleanExpr (',' BooleanExpr)*) ')'

ExprTuple = 
    '(' (Expr (',' Expr)*) ')'

IdentifierNode =
    'identifier'